// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FilesLabel is an object representing the database table.
type FilesLabel struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FileID     int       `boil:"file_id" json:"file_id" toml:"file_id" yaml:"file_id"`
	LabelID    null.Int  `boil:"label_id" json:"label_id,omitempty" toml:"label_id" yaml:"label_id,omitempty"`
	CreateTime time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *filesLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filesLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilesLabelColumns = struct {
	ID         string
	FileID     string
	LabelID    string
	CreateTime string
	UpdateTime string
}{
	ID:         "id",
	FileID:     "file_id",
	LabelID:    "label_id",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

// FilesLabelRels is where relationship names are stored.
var FilesLabelRels = struct {
	File  string
	Label string
}{
	File:  "File",
	Label: "Label",
}

// filesLabelR is where relationships are stored.
type filesLabelR struct {
	File  *File
	Label *Label
}

// NewStruct creates a new relationship struct
func (*filesLabelR) NewStruct() *filesLabelR {
	return &filesLabelR{}
}

// filesLabelL is where Load methods for each relationship are stored.
type filesLabelL struct{}

var (
	filesLabelColumns               = []string{"id", "file_id", "label_id", "create_time", "update_time"}
	filesLabelColumnsWithoutDefault = []string{"file_id", "label_id"}
	filesLabelColumnsWithDefault    = []string{"id", "create_time", "update_time"}
	filesLabelPrimaryKeyColumns     = []string{"id"}
)

type (
	// FilesLabelSlice is an alias for a slice of pointers to FilesLabel.
	// This should generally be used opposed to []FilesLabel.
	FilesLabelSlice []*FilesLabel
	// FilesLabelHook is the signature for custom FilesLabel hook methods
	FilesLabelHook func(boil.Executor, *FilesLabel) error

	filesLabelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filesLabelType                 = reflect.TypeOf(&FilesLabel{})
	filesLabelMapping              = queries.MakeStructMapping(filesLabelType)
	filesLabelPrimaryKeyMapping, _ = queries.BindMapping(filesLabelType, filesLabelMapping, filesLabelPrimaryKeyColumns)
	filesLabelInsertCacheMut       sync.RWMutex
	filesLabelInsertCache          = make(map[string]insertCache)
	filesLabelUpdateCacheMut       sync.RWMutex
	filesLabelUpdateCache          = make(map[string]updateCache)
	filesLabelUpsertCacheMut       sync.RWMutex
	filesLabelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var filesLabelBeforeInsertHooks []FilesLabelHook
var filesLabelBeforeUpdateHooks []FilesLabelHook
var filesLabelBeforeDeleteHooks []FilesLabelHook
var filesLabelBeforeUpsertHooks []FilesLabelHook

var filesLabelAfterInsertHooks []FilesLabelHook
var filesLabelAfterSelectHooks []FilesLabelHook
var filesLabelAfterUpdateHooks []FilesLabelHook
var filesLabelAfterDeleteHooks []FilesLabelHook
var filesLabelAfterUpsertHooks []FilesLabelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FilesLabel) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FilesLabel) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FilesLabel) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FilesLabel) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FilesLabel) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FilesLabel) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FilesLabel) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FilesLabel) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FilesLabel) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filesLabelAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilesLabelHook registers your hook function for all future operations.
func AddFilesLabelHook(hookPoint boil.HookPoint, filesLabelHook FilesLabelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		filesLabelBeforeInsertHooks = append(filesLabelBeforeInsertHooks, filesLabelHook)
	case boil.BeforeUpdateHook:
		filesLabelBeforeUpdateHooks = append(filesLabelBeforeUpdateHooks, filesLabelHook)
	case boil.BeforeDeleteHook:
		filesLabelBeforeDeleteHooks = append(filesLabelBeforeDeleteHooks, filesLabelHook)
	case boil.BeforeUpsertHook:
		filesLabelBeforeUpsertHooks = append(filesLabelBeforeUpsertHooks, filesLabelHook)
	case boil.AfterInsertHook:
		filesLabelAfterInsertHooks = append(filesLabelAfterInsertHooks, filesLabelHook)
	case boil.AfterSelectHook:
		filesLabelAfterSelectHooks = append(filesLabelAfterSelectHooks, filesLabelHook)
	case boil.AfterUpdateHook:
		filesLabelAfterUpdateHooks = append(filesLabelAfterUpdateHooks, filesLabelHook)
	case boil.AfterDeleteHook:
		filesLabelAfterDeleteHooks = append(filesLabelAfterDeleteHooks, filesLabelHook)
	case boil.AfterUpsertHook:
		filesLabelAfterUpsertHooks = append(filesLabelAfterUpsertHooks, filesLabelHook)
	}
}

// One returns a single filesLabel record from the query.
func (q filesLabelQuery) One(exec boil.Executor) (*FilesLabel, error) {
	o := &FilesLabel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for files_labels")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FilesLabel records from the query.
func (q filesLabelQuery) All(exec boil.Executor) (FilesLabelSlice, error) {
	var o []*FilesLabel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FilesLabel slice")
	}

	if len(filesLabelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FilesLabel records in the query.
func (q filesLabelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count files_labels rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q filesLabelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if files_labels exists")
	}

	return count > 0, nil
}

// File pointed to by the foreign key.
func (o *FilesLabel) File(mods ...qm.QueryMod) fileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.FileID),
	}

	queryMods = append(queryMods, mods...)

	query := Files(queryMods...)
	queries.SetFrom(query.Query, "`files`")

	return query
}

// Label pointed to by the foreign key.
func (o *FilesLabel) Label(mods ...qm.QueryMod) labelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.LabelID),
	}

	queryMods = append(queryMods, mods...)

	query := Labels(queryMods...)
	queries.SetFrom(query.Query, "`labels`")

	return query
}

// LoadFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filesLabelL) LoadFile(e boil.Executor, singular bool, maybeFilesLabel interface{}, mods queries.Applicator) error {
	var slice []*FilesLabel
	var object *FilesLabel

	if singular {
		object = maybeFilesLabel.(*FilesLabel)
	} else {
		slice = *maybeFilesLabel.(*[]*FilesLabel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filesLabelR{}
		}
		args = append(args, object.FileID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filesLabelR{}
			}

			for _, a := range args {
				if a == obj.FileID {
					continue Outer
				}
			}

			args = append(args, obj.FileID)

		}
	}

	query := NewQuery(qm.From(`files`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load File")
	}

	var resultSlice []*File
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice File")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for files")
	}

	if len(filesLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.File = foreign
		if foreign.R == nil {
			foreign.R = &fileR{}
		}
		foreign.R.FilesLabels = append(foreign.R.FilesLabels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FileID == foreign.ID {
				local.R.File = foreign
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.FilesLabels = append(foreign.R.FilesLabels, local)
				break
			}
		}
	}

	return nil
}

// LoadLabel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filesLabelL) LoadLabel(e boil.Executor, singular bool, maybeFilesLabel interface{}, mods queries.Applicator) error {
	var slice []*FilesLabel
	var object *FilesLabel

	if singular {
		object = maybeFilesLabel.(*FilesLabel)
	} else {
		slice = *maybeFilesLabel.(*[]*FilesLabel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filesLabelR{}
		}
		if !queries.IsNil(object.LabelID) {
			args = append(args, object.LabelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filesLabelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LabelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LabelID) {
				args = append(args, obj.LabelID)
			}

		}
	}

	query := NewQuery(qm.From(`labels`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Label")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Label")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if len(filesLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Label = foreign
		if foreign.R == nil {
			foreign.R = &labelR{}
		}
		foreign.R.FilesLabels = append(foreign.R.FilesLabels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LabelID, foreign.ID) {
				local.R.Label = foreign
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.FilesLabels = append(foreign.R.FilesLabels, local)
				break
			}
		}
	}

	return nil
}

// SetFile of the filesLabel to the related item.
// Sets o.R.File to related.
// Adds o to related.R.FilesLabels.
func (o *FilesLabel) SetFile(exec boil.Executor, insert bool, related *File) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `files_labels` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"file_id"}),
		strmangle.WhereClause("`", "`", 0, filesLabelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FileID = related.ID
	if o.R == nil {
		o.R = &filesLabelR{
			File: related,
		}
	} else {
		o.R.File = related
	}

	if related.R == nil {
		related.R = &fileR{
			FilesLabels: FilesLabelSlice{o},
		}
	} else {
		related.R.FilesLabels = append(related.R.FilesLabels, o)
	}

	return nil
}

// SetLabel of the filesLabel to the related item.
// Sets o.R.Label to related.
// Adds o to related.R.FilesLabels.
func (o *FilesLabel) SetLabel(exec boil.Executor, insert bool, related *Label) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `files_labels` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"label_id"}),
		strmangle.WhereClause("`", "`", 0, filesLabelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LabelID, related.ID)
	if o.R == nil {
		o.R = &filesLabelR{
			Label: related,
		}
	} else {
		o.R.Label = related
	}

	if related.R == nil {
		related.R = &labelR{
			FilesLabels: FilesLabelSlice{o},
		}
	} else {
		related.R.FilesLabels = append(related.R.FilesLabels, o)
	}

	return nil
}

// RemoveLabel relationship.
// Sets o.R.Label to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *FilesLabel) RemoveLabel(exec boil.Executor, related *Label) error {
	var err error

	queries.SetScanner(&o.LabelID, nil)
	if _, err = o.Update(exec, boil.Whitelist("label_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Label = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FilesLabels {
		if queries.Equal(o.LabelID, ri.LabelID) {
			continue
		}

		ln := len(related.R.FilesLabels)
		if ln > 1 && i < ln-1 {
			related.R.FilesLabels[i] = related.R.FilesLabels[ln-1]
		}
		related.R.FilesLabels = related.R.FilesLabels[:ln-1]
		break
	}
	return nil
}

// FilesLabels retrieves all the records using an executor.
func FilesLabels(mods ...qm.QueryMod) filesLabelQuery {
	mods = append(mods, qm.From("`files_labels`"))
	return filesLabelQuery{NewQuery(mods...)}
}

// FindFilesLabel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilesLabel(exec boil.Executor, iD int, selectCols ...string) (*FilesLabel, error) {
	filesLabelObj := &FilesLabel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `files_labels` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, filesLabelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from files_labels")
	}

	return filesLabelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FilesLabel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no files_labels provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filesLabelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	filesLabelInsertCacheMut.RLock()
	cache, cached := filesLabelInsertCache[key]
	filesLabelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			filesLabelColumns,
			filesLabelColumnsWithDefault,
			filesLabelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(filesLabelType, filesLabelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filesLabelType, filesLabelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `files_labels` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `files_labels` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `files_labels` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, filesLabelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into files_labels")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == filesLabelMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for files_labels")
	}

CacheNoHooks:
	if !cached {
		filesLabelInsertCacheMut.Lock()
		filesLabelInsertCache[key] = cache
		filesLabelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FilesLabel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FilesLabel) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	filesLabelUpdateCacheMut.RLock()
	cache, cached := filesLabelUpdateCache[key]
	filesLabelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			filesLabelColumns,
			filesLabelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update files_labels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `files_labels` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, filesLabelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filesLabelType, filesLabelMapping, append(wl, filesLabelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update files_labels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for files_labels")
	}

	if !cached {
		filesLabelUpdateCacheMut.Lock()
		filesLabelUpdateCache[key] = cache
		filesLabelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q filesLabelQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for files_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for files_labels")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilesLabelSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filesLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `files_labels` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filesLabelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in filesLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all filesLabel")
	}
	return rowsAff, nil
}

var mySQLFilesLabelUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FilesLabel) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no files_labels provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filesLabelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFilesLabelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filesLabelUpsertCacheMut.RLock()
	cache, cached := filesLabelUpsertCache[key]
	filesLabelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			filesLabelColumns,
			filesLabelColumnsWithDefault,
			filesLabelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			filesLabelColumns,
			filesLabelPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert files_labels, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "files_labels", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `files_labels` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(filesLabelType, filesLabelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filesLabelType, filesLabelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for files_labels")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == filesLabelMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(filesLabelType, filesLabelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for files_labels")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for files_labels")
	}

CacheNoHooks:
	if !cached {
		filesLabelUpsertCacheMut.Lock()
		filesLabelUpsertCache[key] = cache
		filesLabelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FilesLabel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FilesLabel) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilesLabel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filesLabelPrimaryKeyMapping)
	sql := "DELETE FROM `files_labels` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from files_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for files_labels")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q filesLabelQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no filesLabelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from files_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for files_labels")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilesLabelSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilesLabel slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(filesLabelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filesLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `files_labels` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filesLabelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from filesLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for files_labels")
	}

	if len(filesLabelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FilesLabel) Reload(exec boil.Executor) error {
	ret, err := FindFilesLabel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilesLabelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FilesLabelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filesLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `files_labels`.* FROM `files_labels` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filesLabelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FilesLabelSlice")
	}

	*o = slice

	return nil
}

// FilesLabelExists checks if the FilesLabel row exists.
func FilesLabelExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `files_labels` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if files_labels exists")
	}

	return exists, nil
}
