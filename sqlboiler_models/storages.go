// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Storage is an object representing the database table.
type Storage struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	FilePath   null.String `boil:"file_path" json:"file_path,omitempty" toml:"file_path" yaml:"file_path,omitempty"`
	Access     null.String `boil:"access" json:"access,omitempty" toml:"access" yaml:"access,omitempty"`
	Encrypted  null.Bool   `boil:"encrypted" json:"encrypted,omitempty" toml:"encrypted" yaml:"encrypted,omitempty"`
	CreateTime time.Time   `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime time.Time   `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *storageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StorageColumns = struct {
	ID         string
	Name       string
	FilePath   string
	Access     string
	Encrypted  string
	CreateTime string
	UpdateTime string
}{
	ID:         "id",
	Name:       "name",
	FilePath:   "file_path",
	Access:     "access",
	Encrypted:  "encrypted",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

// StorageRels is where relationship names are stored.
var StorageRels = struct {
	FilesStorages string
}{
	FilesStorages: "FilesStorages",
}

// storageR is where relationships are stored.
type storageR struct {
	FilesStorages FilesStorageSlice
}

// NewStruct creates a new relationship struct
func (*storageR) NewStruct() *storageR {
	return &storageR{}
}

// storageL is where Load methods for each relationship are stored.
type storageL struct{}

var (
	storageColumns               = []string{"id", "name", "file_path", "access", "encrypted", "create_time", "update_time"}
	storageColumnsWithoutDefault = []string{"name", "file_path", "encrypted"}
	storageColumnsWithDefault    = []string{"id", "access", "create_time", "update_time"}
	storagePrimaryKeyColumns     = []string{"id"}
)

type (
	// StorageSlice is an alias for a slice of pointers to Storage.
	// This should generally be used opposed to []Storage.
	StorageSlice []*Storage
	// StorageHook is the signature for custom Storage hook methods
	StorageHook func(boil.Executor, *Storage) error

	storageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storageType                 = reflect.TypeOf(&Storage{})
	storageMapping              = queries.MakeStructMapping(storageType)
	storagePrimaryKeyMapping, _ = queries.BindMapping(storageType, storageMapping, storagePrimaryKeyColumns)
	storageInsertCacheMut       sync.RWMutex
	storageInsertCache          = make(map[string]insertCache)
	storageUpdateCacheMut       sync.RWMutex
	storageUpdateCache          = make(map[string]updateCache)
	storageUpsertCacheMut       sync.RWMutex
	storageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var storageBeforeInsertHooks []StorageHook
var storageBeforeUpdateHooks []StorageHook
var storageBeforeDeleteHooks []StorageHook
var storageBeforeUpsertHooks []StorageHook

var storageAfterInsertHooks []StorageHook
var storageAfterSelectHooks []StorageHook
var storageAfterUpdateHooks []StorageHook
var storageAfterDeleteHooks []StorageHook
var storageAfterUpsertHooks []StorageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Storage) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Storage) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Storage) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Storage) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Storage) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Storage) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range storageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Storage) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Storage) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Storage) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStorageHook registers your hook function for all future operations.
func AddStorageHook(hookPoint boil.HookPoint, storageHook StorageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		storageBeforeInsertHooks = append(storageBeforeInsertHooks, storageHook)
	case boil.BeforeUpdateHook:
		storageBeforeUpdateHooks = append(storageBeforeUpdateHooks, storageHook)
	case boil.BeforeDeleteHook:
		storageBeforeDeleteHooks = append(storageBeforeDeleteHooks, storageHook)
	case boil.BeforeUpsertHook:
		storageBeforeUpsertHooks = append(storageBeforeUpsertHooks, storageHook)
	case boil.AfterInsertHook:
		storageAfterInsertHooks = append(storageAfterInsertHooks, storageHook)
	case boil.AfterSelectHook:
		storageAfterSelectHooks = append(storageAfterSelectHooks, storageHook)
	case boil.AfterUpdateHook:
		storageAfterUpdateHooks = append(storageAfterUpdateHooks, storageHook)
	case boil.AfterDeleteHook:
		storageAfterDeleteHooks = append(storageAfterDeleteHooks, storageHook)
	case boil.AfterUpsertHook:
		storageAfterUpsertHooks = append(storageAfterUpsertHooks, storageHook)
	}
}

// One returns a single storage record from the query.
func (q storageQuery) One(exec boil.Executor) (*Storage, error) {
	o := &Storage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for storages")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Storage records from the query.
func (q storageQuery) All(exec boil.Executor) (StorageSlice, error) {
	var o []*Storage

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Storage slice")
	}

	if len(storageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Storage records in the query.
func (q storageQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count storages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storageQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if storages exists")
	}

	return count > 0, nil
}

// FilesStorages retrieves all the files_storage's FilesStorages with an executor.
func (o *Storage) FilesStorages(mods ...qm.QueryMod) filesStorageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`files_storages`.`storage_id`=?", o.ID),
	)

	query := FilesStorages(queryMods...)
	queries.SetFrom(query.Query, "`files_storages`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`files_storages`.*"})
	}

	return query
}

// LoadFilesStorages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storageL) LoadFilesStorages(e boil.Executor, singular bool, maybeStorage interface{}, mods queries.Applicator) error {
	var slice []*Storage
	var object *Storage

	if singular {
		object = maybeStorage.(*Storage)
	} else {
		slice = *maybeStorage.(*[]*Storage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`files_storages`), qm.WhereIn(`storage_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load files_storages")
	}

	var resultSlice []*FilesStorage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice files_storages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on files_storages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for files_storages")
	}

	if len(filesStorageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FilesStorages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &filesStorageR{}
			}
			foreign.R.Storage = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.StorageID) {
				local.R.FilesStorages = append(local.R.FilesStorages, foreign)
				if foreign.R == nil {
					foreign.R = &filesStorageR{}
				}
				foreign.R.Storage = local
				break
			}
		}
	}

	return nil
}

// AddFilesStorages adds the given related objects to the existing relationships
// of the storage, optionally inserting them as new records.
// Appends related to o.R.FilesStorages.
// Sets related.R.Storage appropriately.
func (o *Storage) AddFilesStorages(exec boil.Executor, insert bool, related ...*FilesStorage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StorageID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `files_storages` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"storage_id"}),
				strmangle.WhereClause("`", "`", 0, filesStoragePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StorageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &storageR{
			FilesStorages: related,
		}
	} else {
		o.R.FilesStorages = append(o.R.FilesStorages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &filesStorageR{
				Storage: o,
			}
		} else {
			rel.R.Storage = o
		}
	}
	return nil
}

// SetFilesStorages removes all previously related items of the
// storage replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Storage's FilesStorages accordingly.
// Replaces o.R.FilesStorages with related.
// Sets related.R.Storage's FilesStorages accordingly.
func (o *Storage) SetFilesStorages(exec boil.Executor, insert bool, related ...*FilesStorage) error {
	query := "update `files_storages` set `storage_id` = null where `storage_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FilesStorages {
			queries.SetScanner(&rel.StorageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Storage = nil
		}

		o.R.FilesStorages = nil
	}
	return o.AddFilesStorages(exec, insert, related...)
}

// RemoveFilesStorages relationships from objects passed in.
// Removes related items from R.FilesStorages (uses pointer comparison, removal does not keep order)
// Sets related.R.Storage.
func (o *Storage) RemoveFilesStorages(exec boil.Executor, related ...*FilesStorage) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StorageID, nil)
		if rel.R != nil {
			rel.R.Storage = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("storage_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FilesStorages {
			if rel != ri {
				continue
			}

			ln := len(o.R.FilesStorages)
			if ln > 1 && i < ln-1 {
				o.R.FilesStorages[i] = o.R.FilesStorages[ln-1]
			}
			o.R.FilesStorages = o.R.FilesStorages[:ln-1]
			break
		}
	}

	return nil
}

// Storages retrieves all the records using an executor.
func Storages(mods ...qm.QueryMod) storageQuery {
	mods = append(mods, qm.From("`storages`"))
	return storageQuery{NewQuery(mods...)}
}

// FindStorage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStorage(exec boil.Executor, iD int, selectCols ...string) (*Storage, error) {
	storageObj := &Storage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `storages` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, storageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from storages")
	}

	return storageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Storage) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no storages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storageInsertCacheMut.RLock()
	cache, cached := storageInsertCache[key]
	storageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storageColumns,
			storageColumnsWithDefault,
			storageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storageType, storageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storageType, storageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `storages` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `storages` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `storages` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, storagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into storages")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == storageMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for storages")
	}

CacheNoHooks:
	if !cached {
		storageInsertCacheMut.Lock()
		storageInsertCache[key] = cache
		storageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Storage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Storage) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storageUpdateCacheMut.RLock()
	cache, cached := storageUpdateCache[key]
	storageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storageColumns,
			storagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update storages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `storages` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, storagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storageType, storageMapping, append(wl, storagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update storages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for storages")
	}

	if !cached {
		storageUpdateCacheMut.Lock()
		storageUpdateCache[key] = cache
		storageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storageQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for storages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for storages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StorageSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `storages` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in storage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all storage")
	}
	return rowsAff, nil
}

var mySQLStorageUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Storage) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no storages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storageColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStorageUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storageUpsertCacheMut.RLock()
	cache, cached := storageUpsertCache[key]
	storageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storageColumns,
			storageColumnsWithDefault,
			storageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			storageColumns,
			storagePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert storages, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "storages", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `storages` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(storageType, storageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storageType, storageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for storages")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == storageMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(storageType, storageMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for storages")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for storages")
	}

CacheNoHooks:
	if !cached {
		storageUpsertCacheMut.Lock()
		storageUpsertCache[key] = cache
		storageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Storage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Storage) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Storage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storagePrimaryKeyMapping)
	sql := "DELETE FROM `storages` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from storages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for storages")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storageQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StorageSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Storage slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(storageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `storages` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storages")
	}

	if len(storageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Storage) Reload(exec boil.Executor) error {
	ret, err := FindStorage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StorageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `storages`.* FROM `storages` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StorageSlice")
	}

	*o = slice

	return nil
}

// StorageExists checks if the Storage row exists.
func StorageExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `storages` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if storages exists")
	}

	return exists, nil
}
