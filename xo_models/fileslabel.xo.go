// Package xo_models contains the types for schema 'dev_themiseum'.
package xo_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// FilesLabel represents a row from 'dev_themiseum.files_labels'.
type FilesLabel struct {
	ID         int           `json:"id"`          // id
	FileID     int           `json:"file_id"`     // file_id
	LabelID    sql.NullInt64 `json:"label_id"`    // label_id
	CreateTime time.Time     `json:"create_time"` // create_time
	UpdateTime time.Time     `json:"update_time"` // update_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FilesLabel exists in the database.
func (fl *FilesLabel) Exists() bool {
	return fl._exists
}

// Deleted provides information if the FilesLabel has been deleted from the database.
func (fl *FilesLabel) Deleted() bool {
	return fl._deleted
}

// Insert inserts the FilesLabel to the database.
func (fl *FilesLabel) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_themiseum.files_labels (` +
		`file_id, label_id, create_time, update_time` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fl.FileID, fl.LabelID, fl.CreateTime, fl.UpdateTime)
	res, err := db.Exec(sqlstr, fl.FileID, fl.LabelID, fl.CreateTime, fl.UpdateTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fl.ID = int(id)
	fl._exists = true

	return nil
}

// Update updates the FilesLabel in the database.
func (fl *FilesLabel) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE dev_themiseum.files_labels SET ` +
		`file_id = ?, label_id = ?, create_time = ?, update_time = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fl.FileID, fl.LabelID, fl.CreateTime, fl.UpdateTime, fl.ID)
	_, err = db.Exec(sqlstr, fl.FileID, fl.LabelID, fl.CreateTime, fl.UpdateTime, fl.ID)
	return err
}

// Save saves the FilesLabel to the database.
func (fl *FilesLabel) Save(db XODB) error {
	if fl.Exists() {
		return fl.Update(db)
	}

	return fl.Insert(db)
}

// Delete deletes the FilesLabel from the database.
func (fl *FilesLabel) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fl._exists {
		return nil
	}

	// if deleted, bail
	if fl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM dev_themiseum.files_labels WHERE id = ?`

	// run query
	XOLog(sqlstr, fl.ID)
	_, err = db.Exec(sqlstr, fl.ID)
	if err != nil {
		return err
	}

	// set deleted
	fl._deleted = true

	return nil
}

// File returns the File associated with the FilesLabel's FileID (file_id).
//
// Generated from foreign key 'files_labels_ibfk_1'.
func (fl *FilesLabel) File(db XODB) (*File, error) {
	return FileByID(db, fl.FileID)
}

// Label returns the Label associated with the FilesLabel's LabelID (label_id).
//
// Generated from foreign key 'files_labels_ibfk_2'.
func (fl *FilesLabel) Label(db XODB) (*Label, error) {
	return LabelByID(db, int(fl.LabelID.Int64))
}

// FilesLabelsByFileID retrieves a row from 'dev_themiseum.files_labels' as a FilesLabel.
//
// Generated from index 'file_id'.
func FilesLabelsByFileID(db XODB, fileID int) ([]*FilesLabel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_id, label_id, create_time, update_time ` +
		`FROM dev_themiseum.files_labels ` +
		`WHERE file_id = ?`

	// run query
	XOLog(sqlstr, fileID)
	q, err := db.Query(sqlstr, fileID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FilesLabel{}
	for q.Next() {
		fl := FilesLabel{
			_exists: true,
		}

		// scan
		err = q.Scan(&fl.ID, &fl.FileID, &fl.LabelID, &fl.CreateTime, &fl.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fl)
	}

	return res, nil
}

// FilesLabelByID retrieves a row from 'dev_themiseum.files_labels' as a FilesLabel.
//
// Generated from index 'files_labels_id_pkey'.
func FilesLabelByID(db XODB, id int) (*FilesLabel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_id, label_id, create_time, update_time ` +
		`FROM dev_themiseum.files_labels ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fl := FilesLabel{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fl.ID, &fl.FileID, &fl.LabelID, &fl.CreateTime, &fl.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &fl, nil
}

// FilesLabelsByLabelID retrieves a row from 'dev_themiseum.files_labels' as a FilesLabel.
//
// Generated from index 'label_id'.
func FilesLabelsByLabelID(db XODB, labelID sql.NullInt64) ([]*FilesLabel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_id, label_id, create_time, update_time ` +
		`FROM dev_themiseum.files_labels ` +
		`WHERE label_id = ?`

	// run query
	XOLog(sqlstr, labelID)
	q, err := db.Query(sqlstr, labelID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FilesLabel{}
	for q.Next() {
		fl := FilesLabel{
			_exists: true,
		}

		// scan
		err = q.Scan(&fl.ID, &fl.FileID, &fl.LabelID, &fl.CreateTime, &fl.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fl)
	}

	return res, nil
}
