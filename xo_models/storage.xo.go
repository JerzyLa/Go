// Package xo_models contains the types for schema 'dev_themiseum'.
package xo_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Storage represents a row from 'dev_themiseum.storages'.
type Storage struct {
	ID         int            `json:"id"`          // id
	Name       Name           `json:"name"`        // name
	FilePath   sql.NullString `json:"file_path"`   // file_path
	Access     Access         `json:"access"`      // access
	Encrypted  sql.NullBool   `json:"encrypted"`   // encrypted
	CreateTime time.Time      `json:"create_time"` // create_time
	UpdateTime time.Time      `json:"update_time"` // update_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Storage exists in the database.
func (s *Storage) Exists() bool {
	return s._exists
}

// Deleted provides information if the Storage has been deleted from the database.
func (s *Storage) Deleted() bool {
	return s._deleted
}

// Insert inserts the Storage to the database.
func (s *Storage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_themiseum.storages (` +
		`name, file_path, access, encrypted, create_time, update_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Name, s.FilePath, s.Access, s.Encrypted, s.CreateTime, s.UpdateTime)
	res, err := db.Exec(sqlstr, s.Name, s.FilePath, s.Access, s.Encrypted, s.CreateTime, s.UpdateTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = int(id)
	s._exists = true

	return nil
}

// Update updates the Storage in the database.
func (s *Storage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE dev_themiseum.storages SET ` +
		`name = ?, file_path = ?, access = ?, encrypted = ?, create_time = ?, update_time = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, s.Name, s.FilePath, s.Access, s.Encrypted, s.CreateTime, s.UpdateTime, s.ID)
	_, err = db.Exec(sqlstr, s.Name, s.FilePath, s.Access, s.Encrypted, s.CreateTime, s.UpdateTime, s.ID)
	return err
}

// Save saves the Storage to the database.
func (s *Storage) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Storage from the database.
func (s *Storage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM dev_themiseum.storages WHERE id = ?`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// StorageByID retrieves a row from 'dev_themiseum.storages' as a Storage.
//
// Generated from index 'storages_id_pkey'.
func StorageByID(db XODB, id int) (*Storage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, file_path, access, encrypted, create_time, update_time ` +
		`FROM dev_themiseum.storages ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Storage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Name, &s.FilePath, &s.Access, &s.Encrypted, &s.CreateTime, &s.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
