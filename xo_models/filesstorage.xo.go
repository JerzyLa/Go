// Package xo_models contains the types for schema 'dev_themiseum'.
package xo_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// FilesStorage represents a row from 'dev_themiseum.files_storages'.
type FilesStorage struct {
	ID         int           `json:"id"`          // id
	FileID     int           `json:"file_id"`     // file_id
	StorageID  sql.NullInt64 `json:"storage_id"`  // storage_id
	CreateTime time.Time     `json:"create_time"` // create_time
	UpdateTime time.Time     `json:"update_time"` // update_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FilesStorage exists in the database.
func (fs *FilesStorage) Exists() bool {
	return fs._exists
}

// Deleted provides information if the FilesStorage has been deleted from the database.
func (fs *FilesStorage) Deleted() bool {
	return fs._deleted
}

// Insert inserts the FilesStorage to the database.
func (fs *FilesStorage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_themiseum.files_storages (` +
		`file_id, storage_id, create_time, update_time` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fs.FileID, fs.StorageID, fs.CreateTime, fs.UpdateTime)
	res, err := db.Exec(sqlstr, fs.FileID, fs.StorageID, fs.CreateTime, fs.UpdateTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fs.ID = int(id)
	fs._exists = true

	return nil
}

// Update updates the FilesStorage in the database.
func (fs *FilesStorage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE dev_themiseum.files_storages SET ` +
		`file_id = ?, storage_id = ?, create_time = ?, update_time = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fs.FileID, fs.StorageID, fs.CreateTime, fs.UpdateTime, fs.ID)
	_, err = db.Exec(sqlstr, fs.FileID, fs.StorageID, fs.CreateTime, fs.UpdateTime, fs.ID)
	return err
}

// Save saves the FilesStorage to the database.
func (fs *FilesStorage) Save(db XODB) error {
	if fs.Exists() {
		return fs.Update(db)
	}

	return fs.Insert(db)
}

// Delete deletes the FilesStorage from the database.
func (fs *FilesStorage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fs._exists {
		return nil
	}

	// if deleted, bail
	if fs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM dev_themiseum.files_storages WHERE id = ?`

	// run query
	XOLog(sqlstr, fs.ID)
	_, err = db.Exec(sqlstr, fs.ID)
	if err != nil {
		return err
	}

	// set deleted
	fs._deleted = true

	return nil
}

// File returns the File associated with the FilesStorage's FileID (file_id).
//
// Generated from foreign key 'files_storages_ibfk_1'.
func (fs *FilesStorage) File(db XODB) (*File, error) {
	return FileByID(db, fs.FileID)
}

// Storage returns the Storage associated with the FilesStorage's StorageID (storage_id).
//
// Generated from foreign key 'files_storages_ibfk_2'.
func (fs *FilesStorage) Storage(db XODB) (*Storage, error) {
	return StorageByID(db, int(fs.StorageID.Int64))
}

// FilesStoragesByFileID retrieves a row from 'dev_themiseum.files_storages' as a FilesStorage.
//
// Generated from index 'file_id'.
func FilesStoragesByFileID(db XODB, fileID int) ([]*FilesStorage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_id, storage_id, create_time, update_time ` +
		`FROM dev_themiseum.files_storages ` +
		`WHERE file_id = ?`

	// run query
	XOLog(sqlstr, fileID)
	q, err := db.Query(sqlstr, fileID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FilesStorage{}
	for q.Next() {
		fs := FilesStorage{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.FileID, &fs.StorageID, &fs.CreateTime, &fs.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}

// FilesStorageByID retrieves a row from 'dev_themiseum.files_storages' as a FilesStorage.
//
// Generated from index 'files_storages_id_pkey'.
func FilesStorageByID(db XODB, id int) (*FilesStorage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_id, storage_id, create_time, update_time ` +
		`FROM dev_themiseum.files_storages ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fs := FilesStorage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fs.ID, &fs.FileID, &fs.StorageID, &fs.CreateTime, &fs.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &fs, nil
}

// FilesStoragesByStorageID retrieves a row from 'dev_themiseum.files_storages' as a FilesStorage.
//
// Generated from index 'storage_id'.
func FilesStoragesByStorageID(db XODB, storageID sql.NullInt64) ([]*FilesStorage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_id, storage_id, create_time, update_time ` +
		`FROM dev_themiseum.files_storages ` +
		`WHERE storage_id = ?`

	// run query
	XOLog(sqlstr, storageID)
	q, err := db.Query(sqlstr, storageID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FilesStorage{}
	for q.Next() {
		fs := FilesStorage{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.FileID, &fs.StorageID, &fs.CreateTime, &fs.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}
