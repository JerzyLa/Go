// Package xo_models contains the types for schema 'dev_themiseum'.
package xo_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Notification represents a row from 'dev_themiseum.notifications'.
type Notification struct {
	ID         int          `json:"id"`          // id
	Email      string       `json:"email"`       // email
	FileID     int          `json:"file_id"`     // file_id
	WasSent    sql.NullBool `json:"was_sent"`    // was_sent
	IsActive   sql.NullBool `json:"is_active"`   // is_active
	CreateTime time.Time    `json:"create_time"` // create_time
	UpdateTime time.Time    `json:"update_time"` // update_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Notification exists in the database.
func (n *Notification) Exists() bool {
	return n._exists
}

// Deleted provides information if the Notification has been deleted from the database.
func (n *Notification) Deleted() bool {
	return n._deleted
}

// Insert inserts the Notification to the database.
func (n *Notification) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_themiseum.notifications (` +
		`email, file_id, was_sent, is_active, create_time, update_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, n.Email, n.FileID, n.WasSent, n.IsActive, n.CreateTime, n.UpdateTime)
	res, err := db.Exec(sqlstr, n.Email, n.FileID, n.WasSent, n.IsActive, n.CreateTime, n.UpdateTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	n.ID = int(id)
	n._exists = true

	return nil
}

// Update updates the Notification in the database.
func (n *Notification) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE dev_themiseum.notifications SET ` +
		`email = ?, file_id = ?, was_sent = ?, is_active = ?, create_time = ?, update_time = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, n.Email, n.FileID, n.WasSent, n.IsActive, n.CreateTime, n.UpdateTime, n.ID)
	_, err = db.Exec(sqlstr, n.Email, n.FileID, n.WasSent, n.IsActive, n.CreateTime, n.UpdateTime, n.ID)
	return err
}

// Save saves the Notification to the database.
func (n *Notification) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Insert(db)
}

// Delete deletes the Notification from the database.
func (n *Notification) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM dev_themiseum.notifications WHERE id = ?`

	// run query
	XOLog(sqlstr, n.ID)
	_, err = db.Exec(sqlstr, n.ID)
	if err != nil {
		return err
	}

	// set deleted
	n._deleted = true

	return nil
}

// File returns the File associated with the Notification's FileID (file_id).
//
// Generated from foreign key 'notifications_ibfk_1'.
func (n *Notification) File(db XODB) (*File, error) {
	return FileByID(db, n.FileID)
}

// NotificationByFileIDEmail retrieves a row from 'dev_themiseum.notifications' as a Notification.
//
// Generated from index 'file_id'.
func NotificationByFileIDEmail(db XODB, fileID int, email string) (*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, file_id, was_sent, is_active, create_time, update_time ` +
		`FROM dev_themiseum.notifications ` +
		`WHERE file_id = ? AND email = ?`

	// run query
	XOLog(sqlstr, fileID, email)
	n := Notification{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, fileID, email).Scan(&n.ID, &n.Email, &n.FileID, &n.WasSent, &n.IsActive, &n.CreateTime, &n.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &n, nil
}

// NotificationsByFileIDEmail retrieves a row from 'dev_themiseum.notifications' as a Notification.
//
// Generated from index 'file_id_2'.
func NotificationsByFileIDEmail(db XODB, fileID int, email string) ([]*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, file_id, was_sent, is_active, create_time, update_time ` +
		`FROM dev_themiseum.notifications ` +
		`WHERE file_id = ? AND email = ?`

	// run query
	XOLog(sqlstr, fileID, email)
	q, err := db.Query(sqlstr, fileID, email)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Notification{}
	for q.Next() {
		n := Notification{
			_exists: true,
		}

		// scan
		err = q.Scan(&n.ID, &n.Email, &n.FileID, &n.WasSent, &n.IsActive, &n.CreateTime, &n.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &n)
	}

	return res, nil
}

// NotificationByID retrieves a row from 'dev_themiseum.notifications' as a Notification.
//
// Generated from index 'notifications_id_pkey'.
func NotificationByID(db XODB, id int) (*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, file_id, was_sent, is_active, create_time, update_time ` +
		`FROM dev_themiseum.notifications ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	n := Notification{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&n.ID, &n.Email, &n.FileID, &n.WasSent, &n.IsActive, &n.CreateTime, &n.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &n, nil
}
