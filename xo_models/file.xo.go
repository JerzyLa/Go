// Package xo_models contains the types for schema 'dev_themiseum'.
package xo_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// File represents a row from 'dev_themiseum.files'.
type File struct {
	ID              int            `json:"id"`               // id
	FileHash        string         `json:"file_hash"`        // file_hash
	Signature       string         `json:"signature"`        // signature
	TransactionHash sql.NullString `json:"transaction_hash"` // transaction_hash
	Name            sql.NullString `json:"name"`             // name
	Description     sql.NullString `json:"description"`      // description
	BlockID         sql.NullInt64  `json:"block_id"`         // block_id
	Address         sql.NullString `json:"address"`          // address
	Confirmed       sql.NullBool   `json:"confirmed"`        // confirmed
	UUID            sql.NullString `json:"uuid"`             // uuid
	Email           sql.NullString `json:"email"`            // email
	FileIndex       int            `json:"file_index"`       // file_index
	CreateTime      time.Time      `json:"create_time"`      // create_time
	UpdateTime      time.Time      `json:"update_time"`      // update_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the File exists in the database.
func (f *File) Exists() bool {
	return f._exists
}

// Deleted provides information if the File has been deleted from the database.
func (f *File) Deleted() bool {
	return f._deleted
}

// Insert inserts the File to the database.
func (f *File) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO dev_themiseum.files (` +
		`file_hash, signature, transaction_hash, name, description, block_id, address, confirmed, uuid, email, file_index, create_time, update_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, f.FileHash, f.Signature, f.TransactionHash, f.Name, f.Description, f.BlockID, f.Address, f.Confirmed, f.UUID, f.Email, f.FileIndex, f.CreateTime, f.UpdateTime)
	res, err := db.Exec(sqlstr, f.FileHash, f.Signature, f.TransactionHash, f.Name, f.Description, f.BlockID, f.Address, f.Confirmed, f.UUID, f.Email, f.FileIndex, f.CreateTime, f.UpdateTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	f.ID = int(id)
	f._exists = true

	return nil
}

// Update updates the File in the database.
func (f *File) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE dev_themiseum.files SET ` +
		`file_hash = ?, signature = ?, transaction_hash = ?, name = ?, description = ?, block_id = ?, address = ?, confirmed = ?, uuid = ?, email = ?, file_index = ?, create_time = ?, update_time = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, f.FileHash, f.Signature, f.TransactionHash, f.Name, f.Description, f.BlockID, f.Address, f.Confirmed, f.UUID, f.Email, f.FileIndex, f.CreateTime, f.UpdateTime, f.ID)
	_, err = db.Exec(sqlstr, f.FileHash, f.Signature, f.TransactionHash, f.Name, f.Description, f.BlockID, f.Address, f.Confirmed, f.UUID, f.Email, f.FileIndex, f.CreateTime, f.UpdateTime, f.ID)
	return err
}

// Save saves the File to the database.
func (f *File) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Delete deletes the File from the database.
func (f *File) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM dev_themiseum.files WHERE id = ?`

	// run query
	XOLog(sqlstr, f.ID)
	_, err = db.Exec(sqlstr, f.ID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FileByFileHashSignature retrieves a row from 'dev_themiseum.files' as a File.
//
// Generated from index 'file_hash'.
func FileByFileHashSignature(db XODB, fileHash string, signature string) (*File, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_hash, signature, transaction_hash, name, description, block_id, address, confirmed, uuid, email, file_index, create_time, update_time ` +
		`FROM dev_themiseum.files ` +
		`WHERE file_hash = ? AND signature = ?`

	// run query
	XOLog(sqlstr, fileHash, signature)
	f := File{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, fileHash, signature).Scan(&f.ID, &f.FileHash, &f.Signature, &f.TransactionHash, &f.Name, &f.Description, &f.BlockID, &f.Address, &f.Confirmed, &f.UUID, &f.Email, &f.FileIndex, &f.CreateTime, &f.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

// FilesByFileHashSignature retrieves a row from 'dev_themiseum.files' as a File.
//
// Generated from index 'file_hash_2'.
func FilesByFileHashSignature(db XODB, fileHash string, signature string) ([]*File, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_hash, signature, transaction_hash, name, description, block_id, address, confirmed, uuid, email, file_index, create_time, update_time ` +
		`FROM dev_themiseum.files ` +
		`WHERE file_hash = ? AND signature = ?`

	// run query
	XOLog(sqlstr, fileHash, signature)
	q, err := db.Query(sqlstr, fileHash, signature)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*File{}
	for q.Next() {
		f := File{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.ID, &f.FileHash, &f.Signature, &f.TransactionHash, &f.Name, &f.Description, &f.BlockID, &f.Address, &f.Confirmed, &f.UUID, &f.Email, &f.FileIndex, &f.CreateTime, &f.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FileByID retrieves a row from 'dev_themiseum.files' as a File.
//
// Generated from index 'files_id_pkey'.
func FileByID(db XODB, id int) (*File, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_hash, signature, transaction_hash, name, description, block_id, address, confirmed, uuid, email, file_index, create_time, update_time ` +
		`FROM dev_themiseum.files ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	f := File{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&f.ID, &f.FileHash, &f.Signature, &f.TransactionHash, &f.Name, &f.Description, &f.BlockID, &f.Address, &f.Confirmed, &f.UUID, &f.Email, &f.FileIndex, &f.CreateTime, &f.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
